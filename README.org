#+AUTHOR: Trond Aasan
#+TITLE: Caching HTTP server
#+OPTIONS: H:3 toc:2
#+STARTUP: overview

* Code

** Server                                                              :Code:

#+begin_src rust :tangle "src/main.rs"
  use std::sync::Arc;

  use actix_web::{
      dev::Payload,
      error,
      http::StatusCode,
      middleware,
      web::{self},
      App, Error as AWError, FromRequest, HttpRequest, HttpResponse, HttpServer, ResponseError,
  };
  use clap::Parser;
  use futures_util::future::{err, ok, Ready};
  use r2d2_sqlite::{self, SqliteConnectionManager};

  mod db;
  use db::Pool;

  static PATH_RE: &lazy_regex::Lazy<lazy_regex::Regex> =
      lazy_regex::regex!(r"^/?([a-z][a-z0-9+\-.]*:)/+");

  #[derive(Debug)]
  struct ShakyUrl(url::Url);

  #[derive(Debug)]
  enum ShakyUrlError {
      String(String),
      ParseError(url::ParseError),
  }

  impl std::fmt::Display for ShakyUrlError {
      fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
          match self {
              ShakyUrlError::String(x) => f.write_str(x.as_str()),
              ShakyUrlError::ParseError(err) => f.write_fmt(format_args!("{}", err)),
          }
      }
  }

  impl ResponseError for ShakyUrlError {
      fn status_code(&self) -> StatusCode {
          StatusCode::INTERNAL_SERVER_ERROR
      }
  }

  impl FromRequest for ShakyUrl {
      type Error = ShakyUrlError;
      type Future = Ready<Result<Self, Self::Error>>;

      fn from_request(req: &HttpRequest, _: &mut Payload) -> Self::Future {
          let uri = format!(
              "{}{}",
              req.match_info().query("url_no_query"),
              if req.query_string() == "" {
                  String::new()
              } else {
                  format!("?{}", req.query_string())
              },
          );
          log::debug!("Extracted url from request {}", uri);
          // Strip first slash and denormalize url
          // BOTT-INT clients normalize slashes in url path (https://example.com turns to https:/example.com)
          let uri = PATH_RE.replace(uri.as_str(), "${1}//").to_string();
          match url::Url::parse(uri.as_str()) {
              Ok(x) => {
                  let scheme = x.scheme();
                  if !(scheme == "https" || scheme == "http") {
                      err(ShakyUrlError::String(format!("Unknown scheme: {scheme}")))
                  } else {
                      ok(Self(x))
                  }
              }
              Err(e) => err(ShakyUrlError::ParseError(e)),
          }
      }
  }

  impl TryFrom<&str> for ShakyUrl {
      type Error = String;

      fn try_from(uri: &str) -> Result<Self, Self::Error> {
          let uri = PATH_RE.replace(uri, "${1}//").to_string();
          match url::Url::parse(uri.as_str()) {
              Ok(x) => {
                  let scheme = x.scheme();
                  if !(scheme == "https" || scheme == "http") {
                      Err(format!("Unknown scheme: {scheme}"))
                  } else {
                      Ok(Self(x))
                  }
              }
              Err(err) => Err(format!("Invalid url {uri} Original error: {err}")),
          }
      }
  }

  async fn cache(
      settings: web::Data<db::CacheSettings>,
      pool: web::Data<Pool>,
      client: web::Data<awc::Client>,
      url: ShakyUrl,
      req: HttpRequest,
  ) -> Result<HttpResponse, AWError> {
      if req.method() == actix_web::http::Method::OPTIONS {
          log::info!("Ignoring {} request", req.method());
          let mut res = HttpResponse::Ok();
          res.append_header(("access-control-allow-origin", "*"));
          res.append_header(("access-control-allow-headers", "*"));
          return Ok(res.finish());
      }
      let result = db::execute(&settings, &pool, &req, &url.0, &client)
          .await
          .map_err(error::ErrorInternalServerError)?;
      log::debug!("{result:?}");
      log::debug!("{:?}", req.match_info());
      log::debug!("ShakyUrl: {:?}", url);

      Ok(result)
  }

  async fn get_stats(pool: web::Data<Pool>) -> Result<web::Json<db::Stats>, AWError> {
      let res = db::get_stats(&pool).await?;
      Ok(res)
  }

  async fn get_settings(
      settings: web::Data<db::CacheSettings>,
  ) -> Result<web::Json<web::Data<db::CacheSettings>>, AWError> {
      Ok(web::Json(settings))
  }

  #[derive(Debug, Clone)]
  struct DatabaseSource(std::path::PathBuf);

  impl From<DatabaseSource> for SqliteConnectionManager {
      fn from(source: DatabaseSource) -> Self {
          SqliteConnectionManager::file(source.0)
      }
  }

  impl From<String> for DatabaseSource {
      fn from(path: String) -> Self {
          DatabaseSource(path.into())
      }
  }

  impl From<&str> for DatabaseSource {
      fn from(path: &str) -> Self {
          DatabaseSource(path.into())
      }
  }

  impl ToString for DatabaseSource {
      fn to_string(&self) -> String {
          self.0.to_string_lossy().to_string()
      }
  }

  #[derive(Parser, Debug, Clone)]
  struct Cli {
      #[arg(short, long, default_value_t = String::from("localhost:7776"))]
      bind: String,

      #[arg(short, long, value_name = "FILE", default_value_t = ("cache.db").into())]
      database: DatabaseSource,

      #[arg(short, long, value_name = "SECONDS", default_value_t = 0)]
      ttl: u16,

      #[arg(long)]
      no_client_errors: bool,

      #[arg(long)]
      server_errors: bool,
  }

  #[actix_web::main]
  async fn main() -> std::io::Result<()> {
      let cli_args = Cli::parse();
      env_logger::init_from_env(env_logger::Env::new().default_filter_or("debug"));
      log::debug!("{:?}", cli_args);
      // Database
      let manager: SqliteConnectionManager = cli_args.database.into();
      let pool = Pool::new(manager).unwrap();
      db::create_db(&pool).unwrap();

      let settings = db::CacheSettings::new(
          !cli_args.no_client_errors,
          cli_args.server_errors,
          cli_args.ttl,
      );
      log::debug!("{:?}", settings);
      log::info!("starting HTTP proxy server at {}", cli_args.bind);
      let client_tls_config = Arc::new(rustls_config());
      // start HTTP server
      HttpServer::new(move || {
          let client = awc::Client::builder()
              .disable_timeout()
              // Some sites require a User-Agent header to make requests
              .add_default_header(("user-agent", "caching-http-server/1.0"))
              // a "connector" wraps the stream into an encrypted connection
              .connector(awc::Connector::new().rustls(Arc::clone(&client_tls_config)))
              .finish();
          App::new()
              .app_data(web::Data::new(settings.clone()))
              .app_data(web::Data::new(pool.clone()))
              .app_data(web::Data::new(client))
              // .app_data(web::Data::new(select_sql))
              .wrap(middleware::Logger::default())
              .service(web::resource("/{url_no_query:https?:/.*}").route(web::to(cache)))
              .service(web::resource("/settings").route(web::to(get_settings)))
              .service(web::resource("/stats").route(web::to(get_stats)))
              .default_service(web::to(not_found))
      })
      .bind(cli_args.bind)? // TODO
      .worker_max_blocking_threads(1) // TODO
      .workers(1) // TODO
      .run()
      .await
  }

  async fn not_found() -> Result<HttpResponse, AWError> {
      Ok(HttpResponse::build(StatusCode::NOT_FOUND)
          .content_type("application/json")
          .body(r#"{"errors": [{"status": "404"}]}"#))
  }

  /// Create simple rustls client config from root certificates.
  fn rustls_config() -> rustls::ClientConfig {
      let mut root_store = rustls::RootCertStore::empty();
      root_store.add_server_trust_anchors(webpki_roots::TLS_SERVER_ROOTS.0.iter().map(|ta| {
          rustls::OwnedTrustAnchor::from_subject_spki_name_constraints(
              ta.subject,
              ta.spki,
              ta.name_constraints,
          )
      }));

      rustls::ClientConfig::builder()
          .with_safe_defaults()
          .with_root_certificates(root_store)
          .with_no_client_auth()
  }
#+end_src

** Database                                                            :Code:

#+begin_src rust :tangle "src/db.rs"
  use std::{collections::HashMap, str::FromStr};

  use actix_web::{
      error,
      http::{header::HeaderMap, Method, StatusCode},
      web::Json,
      Error, HttpRequest, HttpResponse, HttpResponseBuilder,
  };
  use chrono::{DateTime, Utc};
  use r2d2_sqlite::rusqlite::named_params;
  use rusqlite::{types::FromSql, Row, ToSql};
  use serde::Serialize;
  use url::Url;

  pub type Pool = r2d2::Pool<r2d2_sqlite::SqliteConnectionManager>;

  const CREATE_SQL: &str = "
  CREATE TABLE IF NOT EXISTS cache (
   method TEXT,
   url TEXT,
   content BLOB,
   headers TEXT,
   status_code INTEGER,
   last_update TEXT DEFAULT CURRENT_TIMESTAMP NOT NULL,
   PRIMARY KEY (method, url)
  )";

  const UPSERT_SQL: &str = "
  INSERT INTO cache (method, url, content, headers, status_code) VALUES (:method, :url, :content, :headers, :status_code)
   ON CONFLICT(method, url) DO UPDATE SET
   content=excluded.content,
   headers=excluded.headers,
   status_code=excluded.status_code,
   last_update=CURRENT_TIMESTAMP";

  #[derive(Debug)]
  pub struct Entry {
      pub method: Method,
      pub url: Url,
      pub content: Vec<u8>,
      pub headers: HttpHeaders,
      pub status_code: StatusCode,
      pub last_update: DateTime<Utc>,
  }

  impl From<&Entry> for HttpResponse {
      fn from(entry: &Entry) -> Self {
          let mut builder = HttpResponseBuilder::new(entry.status_code);
          for (key, values) in &entry.headers.0 {
              for value in values {
                  builder.append_header((key.to_owned(), value.to_owned()));
              }
          }
          builder.body(entry.content.clone())
      }
  }

  #[derive(Debug)]
  pub enum InvalidEntry {
      RusqliteError(rusqlite::Error),
      InvalidMethod(http::method::InvalidMethod),
      InvalidStatusCode(http::status::InvalidStatusCode),
  }

  impl std::error::Error for InvalidEntry {}

  impl std::fmt::Display for InvalidEntry {
      fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
          match self {
              InvalidEntry::RusqliteError(err) => err.fmt(f),
              InvalidEntry::InvalidMethod(err) => err.fmt(f),
              InvalidEntry::InvalidStatusCode(err) => err.fmt(f),
          }
      }
  }

  impl From<http::status::InvalidStatusCode> for InvalidEntry {
      fn from(err: http::status::InvalidStatusCode) -> InvalidEntry {
          InvalidEntry::InvalidStatusCode(err)
      }
  }

  impl From<http::method::InvalidMethod> for InvalidEntry {
      fn from(err: http::method::InvalidMethod) -> InvalidEntry {
          InvalidEntry::InvalidMethod(err)
      }
  }

  impl From<rusqlite::Error> for InvalidEntry {
      fn from(err: rusqlite::Error) -> InvalidEntry {
          InvalidEntry::RusqliteError(err)
      }
  }

  impl TryFrom<&Row<'_>> for Entry {
      type Error = InvalidEntry;

      fn try_from(row: &Row<'_>) -> Result<Self, Self::Error> {
          let m: String = row.get("method")?;
          let method = Method::from_str(m.as_str())?;
          let status_code = StatusCode::from_u16(row.get("status_code")?)?;
          Ok(Entry {
              method,
              url: row.get("url")?,
              content: row.get("content")?,
              headers: row.get("headers")?,
              status_code,
              last_update: row.get("last_update")?,
          })
      }
  }

  #[derive(Debug, Clone, Serialize)]
  pub struct CacheSettings {
      pub client_errors: bool,
      pub server_errors: bool,
      pub ttl: u16,
      sql: String,
  }

  impl CacheSettings {
      pub fn new(client_errors: bool, server_errors: bool, ttl: u16) -> Self {
          let mut sql = String::from("SELECT * FROM cache WHERE method = :method AND url = :url");
          if ttl > 0 {
              sql += format!(
                  " AND last_update > datetime(CURRENT_TIMESTAMP, '-{} seconds')",
                  ttl
              )
              .as_str();
          }
          sql += " AND (status_code < 400";
          if client_errors {
              sql += " OR status_code BETWEEN 400 AND 499";
          }
          if server_errors {
              sql += " OR status_code BETWEEN 500 AND 599";
          }
          sql += ")";
          CacheSettings {
              client_errors,
              server_errors,
              ttl,
              sql,
          }
      }

      pub fn to_sql(&self) -> &str {
          self.sql.as_str()
      }
  }

  pub fn create_db(pool: &Pool) -> Result<usize, Box<dyn std::error::Error>> {
      log::debug!("Creating database");
      let conn = pool.get()?;
      Ok(conn.execute(CREATE_SQL, ())?)
  }

  #[derive(Debug)]
  pub struct HttpHeaders(HashMap<String, Vec<String>>);

  impl From<&HeaderMap> for HttpHeaders {
      fn from(headers: &HeaderMap) -> Self {
          let mut m: HashMap<String, Vec<String>> = HashMap::new();
          for k in headers.keys() {
              m.insert(
                  k.to_string(),
                  headers
                      .get_all(k)
                      .map(|x| x.to_str().unwrap().into())
                      .collect(),
              );
          }
          Self(m)
      }
  }

  impl FromSql for HttpHeaders {
      fn column_result(value: rusqlite::types::ValueRef<'_>) -> rusqlite::types::FromSqlResult<Self> {
          value.as_str().and_then(|s| match serde_json::from_str(s) {
              Ok(x) => Ok(Self(x)),
              Err(err) => Err(rusqlite::types::FromSqlError::Other(Box::new(err))),
          })
      }
  }

  impl ToSql for HttpHeaders {
      fn to_sql(&self) -> rusqlite::Result<rusqlite::types::ToSqlOutput<'_>> {
          match serde_json::to_string(&self.0) {
              Ok(x) => Ok(rusqlite::types::ToSqlOutput::Owned(
                  rusqlite::types::Value::Text(x),
              )),
              Err(err) => Err(rusqlite::Error::ToSqlConversionFailure(Box::new(err))),
          }
      }
  }

  pub async fn execute(
      settings: &CacheSettings,
      pool: &Pool,
      request: &HttpRequest,
      url: &Url,
      client: &awc::Client,
  ) -> Result<HttpResponse, Box<dyn std::error::Error>> {
      log::debug!("{:?}", request.uri());
      let method = request.method().to_string();
      let conn = pool.get()?;
      let mut stmt = conn.prepare_cached(settings.to_sql())?;
      let mut entry_iter = stmt.query_map(
          named_params! {":method": method, ":url": url.to_string()},
          |row| Ok(Entry::try_from(row)),
      )?;
      match entry_iter.next() {
          Some(Ok(x)) => {
              log::info!("Serving from cache");
              x
          }
          Some(Err(x)) => Err(x.into()),
          None => {
              log::info!("No match, proxying");
              let mut client_req = client.request(request.method().to_owned(), url.to_string());
              for header in request.headers() {
                  client_req = client_req.insert_header(header);
              }
              client_req = client_req.insert_header(("host", url.host().unwrap().to_string()));
              log::debug!("{} {}", client_req.get_method(), client_req.get_uri());
              let mut res = client_req.send().await?;
              let content = res.body().limit(core::usize::MAX).await?; // TODO limit
              log::debug!("Response: {:?}", res); // <- server http response
              let mut client_response = HttpResponse::build(res.status());
              for (header_name, header_value) in res
                  .headers()
                  .iter()
                  .filter(|(h, _)| !(*h == "connection" || *h == "content-encoding"))
              {
                  client_response.insert_header((header_name.clone(), header_value.clone()));
              }

              let client_response = client_response.finish();
              let entry = Entry {
                  method: request.method().into(),
                  url: url.clone(),
                  content: content.to_vec(), // response.body(),
                  headers: HttpHeaders::from(client_response.headers()),
                  status_code: client_response.status(),
                  last_update: Utc::now(),
              };
              // TODO maybe check with settings if we should save? Or is check only on SELECT?
              log::debug!("Saving to database");
              let mut stmt = conn.prepare_cached(UPSERT_SQL)?;
              stmt.execute(named_params! {
                      ":method": &entry.method.to_string(),
                      ":url": &entry.url,
                      ":content": &entry.content,
                      ":headers": &entry.headers,
                      ":status_code": &entry.status_code.as_str(),
              })?;
              Ok(entry)
          }
      }
      .map(|entry| Ok((&entry).into()))?
  }

  #[derive(Debug, Clone, Serialize)]
  pub struct Stats {
      urls: usize,
  }

  pub async fn get_stats(pool: &Pool) -> Result<Json<Stats>, Error> {
      let conn = pool.get().map_err(error::ErrorInternalServerError)?;
      let mut stmt = conn
          .prepare_cached("SELECT COUNT(*) as c FROM cache")
          .map_err(error::ErrorInternalServerError)?;
      stmt.query_row((), |row| row.get("c").map(|urls| Json(Stats { urls })))
          .map_err(error::ErrorInternalServerError)
  }
#+end_src
